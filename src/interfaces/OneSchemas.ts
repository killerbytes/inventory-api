/**
 * This file was automatically generated by joi-to-typescript
 * Do not modify this file manually
 */

export interface breakPack {
  conversionFactor: number;
  fromCombinationId: number;
  quantity: number;
  toCombinationId: number;
}

export interface category {
  description?: string;
  name: string;
}

export interface customer {
  address: string;
  contact?: string | null;
  email?: string | null;
  isActive?: boolean;
  name: string;
  notes?: string;
  phone: string;
}

export interface inventory {
  id?: number;
  productId: number;
  quantity: number;
}

export interface inventoryMovement {
  type: 'IN' | 'OUT' | 'STOCK_ADJUSTMENT' | 'RETURN' | 'CANCEL_PURCHASE' | 'BREAK_PACK' | 'RE_PACK';
}

export interface inventoryPriceAdjustment {
  price: number;
}

export interface login {
  password: string;
  username: string;
}

export interface product {
  categoryId: number;
  combinations?: productCombinations[];
  description?: string | null;
  name: string;
  unit: string;
  variants?: variant[];
}

export interface productCombinations {
  id?: number;
  price: number;
  productId?: number;
  reorderLevel: number;
  sku?: string | null;
  values?: variantValue[];
}

export interface purchaseOrder {
  checkNumber?: string | null;
  deliveryDate: Date;
  dueDate?: Date;
  internalNotes?: string | null | '';
  modeOfPayment: string;
  notes?: string | null | '';
  purchaseOrderItems: purchaseOrderItem[];
  purchaseOrderNumber: string;
  supplierId: number;
}

export interface purchaseOrderChangeStatus {
  status?: 'VOID';
}

export interface purchaseOrderItem {
  cancellationReason?: string | null;
  combinationId: number;
  discount?: number | null;
  discountNote?: string | null | '';
  id?: number;
  nameSnapshot?: string;
  originalPrice?: number | null;
  purchasePrice: number;
  quantity: number;
  skuSnapshot?: string;
  status?: 'PENDING' | 'RECEIVED' | 'COMPLETED' | 'CANCELLED';
  unit?: string;
  variantSnapshot?: object;
}

export interface purchaseOrderStatus {
  cancellationReason?: string | null;
  status?: 'PENDING' | 'RECEIVED' | 'COMPLETED' | 'CANCELLED';
}

export interface purchaseOrderUpdate {
  checkNumber?: string | null;
  deliveryDate: Date;
  dueDate?: Date;
  internalNotes?: string | null;
  modeOfPayment: string;
  notes?: string | null;
  purchaseOrderItems: purchaseOrderItem[];
  purchaseOrderNumber: string;
  supplierId: number;
}

export interface salesOrder {
  customerId: number;
  deliveryAddress?: string;
  deliveryDate?: Date;
  deliveryInstructions?: string;
  internalNotes?: string | null | '';
  isDelivery?: boolean;
  isDeliveryCompleted?: boolean;
  notes?: string | null | '';
  orderDate: Date;
  salesOrderItems: salesOrderItem[];
  salesOrderNumber: string;
}

export interface salesOrderItem {
  combinationId: number;
  discount?: number | null;
  discountNote?: string | null | '';
  id?: number;
  nameSnapshot?: string;
  originalPrice?: number | null;
  purchasePrice: number;
  quantity: number;
  skuSnapshot?: string;
  status?: 'PENDING' | 'COMPLETED' | 'CANCELLED';
  unit?: string;
  variantSnapshot?: object;
}

export interface salesOrderStatus {
  status?: 'PENDING' | 'COMPLETED' | 'CANCELLED';
}

export interface stockAdjustmentSchema {
  combinationId: number;
  createdAt: Date;
  createdBy: number;
  difference: number;
  newQuantity: number;
  notes?: string | null | '';
  reason: string;
  referenceNo: string;
  systemQuantity: number;
}

export interface supplier {
  address: string;
  contact?: string | null;
  email?: string | null;
  isActive?: boolean;
  name: string;
  notes?: string;
  phone: string;
}

export interface userBase {
  confirmPassword: string;
  email: string;
  isActive?: boolean;
  name: string;
  password: string;
  username: string;
}

export interface userBase {
  email: string;
  isActive?: boolean;
  name: string;
}

export interface variant {
  id?: number;
  isTemplate?: boolean | null;
  name: string;
  productId?: number;
  values: (variantValue | variantValuePayload)[];
}

export interface variantValue {
  id?: number;
  value: string;
  variantTypeId?: number;
}

export type variantValuePayload = string;
